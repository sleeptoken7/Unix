//Q3-renameUSINGapi
#include <stdio.h>
int main(int argc, char *argv[]) {
    if(argc != 3) {
printf("Usage: %s <old_filename> <new_filename>\n", argv[0]);
return 1; } if(rename(argv[1], argv[2]) < 0) { perror("Error");
return 1;}printf("File renamed successfully.\n"); return 0;} 
or 
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
int main(int argc, char *argv[]) {
if(argc != 3) {
printf("usage: %s <src_file> <dest_file>\n", argv[0]);
return 0; }
if(link(argv[1],
argv[2])
printf("link error\n");
return 1; }
printf("files linked\n");
printf("Inode number of linked files\n");== -1)
char str[100];
sprintf(str, "ls -i %s %s\n",argv[1], argv[2]);
system (str);
return 0;
//Q5-duplicate
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
int main(int argc, char **argv) {
if (argc < 2) {
printf("Usage: %s <pathname>\n", argv[0]);
return 1; }
int fd = open (argv[1], O_WRONLY);
if (fd < 0) {
perror("Problem opening the file");
return 1; }
int nfd = fcntl (fd,F_DUPFD_CLOEXEC, 0);
if (nfd==-1) {
perror("Problem duplicating fd");
return 1; }
printf("Fd %d duplicated with %d\n", fd, nfd);
close(fd);close(nfd);
return 0; }
//Q7-LAST 10 char
#include <stdio.h>
#include <stdlib.h>
int main() { FILE *fp;char ch;int num;
printf("Enter the value of num: ");
scanf("%d", &num);
if ((fp = fopen("file.txt","r"))==NULL) {
puts("Cannot open this file");
return 1; }
fseek(fp, -num, SEEK_END);
while ((ch = fgetc(fp)) != EOF)
putchar(ch);fclose(fp);
return 0; }
//Q-1
#include <stdio.h>
int main(int argc, char *argv[]) {
    int c;
    FILE *file = fopen(argv[1], "r");
    while((c = getc(file)) != EOF)
        putchar(c);
    fclose(file);
    return 0;}
//Q-2
#include <stdio.h>
int main(int argc, char *argv[]) {
    char ch;
    FILE *source, *target;
    source = fopen(argv[1], "r");
    target = fopen(argv[2], "w");
    while((ch = fgetc(source)) != EOF)
        fputc(ch, target);
    fclose(source);
    fclose(target);
    return 0;}
//Q-4
#include <fcntl.h>
int main() {
    int fd = open("file1", O_RDWR | O_CREAT, 0644);
    int flags = fcntl(fd, F_GETFL, 0);
    fcntl(fd, F_SETFL, flags | O_NONBLOCK);
    close(fd);
    return 0;}
//Q-6
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <stdlib.h>
int main(int argc, char *argv[]) {
    struct stat sb;
    if(argc != 2) {
        fprintf(stderr, "Usage: %s <pathname>\n", argv[0]);
        exit(EXIT_FAILURE);  }
    if(stat(argv[1], &sb) == -1) {
        perror("stat");
        exit(EXIT_FAILURE);  }
    printf("File type: ");
    switch (sb.st_mode & S_IFMT) {
        case S_IFBLK: printf("Block device\n"); break;
        case S_IFCHR: printf("Character device\n"); break;
        case S_IFDIR: printf("Directory\n"); break;
        case S_IFIFO: printf("FIFO/pipe\n"); break;
        case S_IFLNK: printf("Symlink\n"); break;
        case S_IFREG: printf("Regular file\n"); break;
        case S_IFSOCK: printf("Socket\n"); break;
        default: printf("Unknown\n"); break;  }
    printf("Inode number: %ld\n", (long) sb.st_ino);
    printf("Mode: %lo (octal)\n", (unsigned long) sb.st_mode);
    printf("Blocks allocated: %lld\n", (long long) sb.st_blocks);
    return 0;}
//Q-8
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
void printMask(mode_t mask, char* type) {
    printf("\n%s Mask = %o", type, (int)mask);
    printf("\nThe file mode creation mask now specifies:");
    printf("\n  %s read permission  UNMASKED", type);
    printf("\n  %s write permission  MASKED", type);
    printf("\n  %s execute permission  MASKED", type); }
void changeMask(mode_t oldMask, mode_t newMask, char* type) {
    if(oldMask & newMask) {
        printf("\nChanging %s read permission from Masked to unmasked.\n", type);
        oldMask = (oldMask ^ newMask);  }
    newMask = (oldMask | S_IWOTH | S_IXOTH);
    umask(newMask);
    printMask(newMask, type); }
int main() {
    mode_t oldMask = umask((mode_t)0);
    printMask(oldMask, "Old");
    changeMask(oldMask, S_IRGRP, "Group");
    changeMask(oldMask, S_IRUSR, "User");
    changeMask(oldMask, S_IROTH, "Other"); }


